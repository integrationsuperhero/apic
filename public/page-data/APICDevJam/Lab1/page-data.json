{
    "componentChunkName": "component---src-pages-apic-dev-jam-lab-1-index-md",
    "path": "/APICDevJam/Lab1/",
    "result": {"pageContext":{"frontmatter":{"title":"APIC Dev Jam Lab 1 - Create and Secure an API"},"relativePagePath":"/APICDevJam/Lab1/index.md","titleType":"page","MdxNode":{"id":"9f20e9d5-6d1d-50c6-8b8f-bf50119349f0","children":[],"parent":"08feafb3-2f07-5e28-937f-e1774993233f","internal":{"content":"---\ntitle: APIC Dev Jam Lab 1 - Create and Secure an API\n---\n\n\nIn this lab, you will get a chance to use the online APIC Developer\nToolkit and its intuitive interface to create a new API using the\nOpenAPI definition (YAML) of the existing product inventory RESTful\nweb-service.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Creating an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configuring ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Testing a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n**NOTE: This demo environment contains a full API Connect installation in Cloud Pak for Integration. The login information to the APIC cluster will be sent in a separate email when you reserve the instance. Use Google Chrome, Firefox or Microsoft Edge to access the cluster using the credentials supplied. Make sure you login using API Manager User Registry not Common Services registry.**\n\n## Import API to the Developer Workspace\n\nFirst, we will download the OpenApi file for the existing REST service\nfor Inventory. Then, we will import it to the online workspace.\n\n1.  Open a browser window to the API Manager Portal. If the screen\n    displays `Your connection is not private` click Advanced, and then Accept the to continue. Log in with the username ad credentials supplied.\n\n    ![](images/tutorial_html_c7010880ec6f2b94.png)\n\n    ![](images/tutorial_html_228c6cdfd6f4d489.png)\n\n    When you login for the first time you will see What's new in API Connect\n    10. Click **Done** after reviewing.\n\n    ![](images/tutorial_html_db2469619b74ee90.png)\n\n2.  Click on the `Develop APIs and\n    Products` tile\n    to enter the online development workspace.\n\n    ![](images/tutorial_html_61b4022571d0a4a3.png)  \n\n3.  Now you are in the home screen of the online developer tool. From\n    here, you can begin to create APIs and Products.\n\n    ![](images/tutorial_html_333c6b76e2638b45.png)  \n\n4.  Click `ADD->API.`\n\n    ![](images/tutorial_html_993047b3f798317c.png)  \n\n5.  On the next screen, select `Existing OpenAPI` under\n    Import**,** as in the image below. Then\n    click   `Next.`\n\n    ![](images/tutorial_html_b219e12b9ba30a1c.png)  \n\n6.  Now download the `Inventory.yaml`\n    file the dte-labs git repository using the following command.\n\n    ```\n    curl -OL https://raw.githubusercontent.com/ibm-cloudintegration/dte-labs/master/APICv10/inventory.yaml\n\n    ```\n\n    You can also down the file using this link : [inventory.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/inventory.yaml)\n\n    Choose the downloaded `Inventory.yaml` OpenAPI definition and Click `Next.`\n\n    ![](images/tutorial_html_64514a49c35e90d4.png)  \n\n7.  **Do not** select **Activate API**.\n    Click `Next`.\n\n    ![](images/tutorial_html_3e51d8ec0929f2b5.png)  \n\n8.  The API should be imported successfully as shown in the image below.\n    Click `Edit API`.\n\n    ![](images/tutorial_html_83ece115b799d430.png)\n\n## Configure API\n\nAfter importing the existing API, the first step is to configure basic\nsecurity before exposing it to other developers. By creating a client\nkey and secret security, you are able to identify the app using the\nservices. Next, we will define the backend endpoints where the API is\nactually running. API Connect supports pointing to multiple backend\nendpoints to match your multiple build stage environments. Finally, we\nwill configure the proxy call to invoke the endpoint.\n\n### Configure API Key security\n\n\n1. \tClick on the + icon besides the security schema to create a new security schema\n    ![](images/tutorial_html_99e51d8ec0929f2b5.png)\n\n2.\tPut in the name of the schema and select apiKey as the type\n    ![](images/tutorial_html_3e41d8ec0929f2b5.png)\n3.  Put in the name of the key and select “client_id” as the key type and header as the location.  Then click\nCreate\n    ![](images/tutorial_html_5b900a842ec2bfff.png)\n\n4.  The newly created security schema will be shown in the left navigator.\n\n5.  Click on the + icon besides the security\n\n    ![](images/tutorial_html_3e4ZZ8ec0929f2b5.png)\n\n6.\tSelect the security schema created in the step 3, and then click create and then submit to create it.\n\n    ![](images/tutorial_html_5b90ZZa842ec2bfff.png)\n    ![](images/tutorial_html_5b90ZZa842Vc2bfff.png)\n\n7.  Repeat steps 1 to 4 to create X-IBM-Client-secret as a Type Client-Secret,\n\n    ![](images/step2_6.png)\n\n6.\tGo to the Security entry created in step 5. Select the security schema created in the step 3, and then click create and then submit to create it.\n\n    ![](images/tutorial_html_5b90ZZEa842ec2bfff.png)\n\n\n### Define Target-URL for Sandbox environment\n\n1.  Click on the gateway tab and then use the + icon beside property to create a new property.\n    ![](images/step3_1.png)\n\n2.  Update the URL to  https://apic-pot-inventory-api.mybluemix.net\n    ![](images/step3_2.png)\n\n3.  Click `Save` to complete the\n    configuration.\n\n### Configure Proxy Call in Designer\n\n1.  Click on the “policies” and then click on the “Invoke” item in the assembly panel.\n    ![](images/step4_1.png)\n\n2.  Update the URL in the invoke configuration with  `$(target-url)$(request.path)$(request.search)`\n    ![](images/step4_2.png)\n\n3.  Click `Save`.\n\n## Test the API\n\nIn the API designer, you have the ability to test the API immediately\nafter creation in the Assemble view!\n\n1.  Toggle `Offline` to activate API. to publish the API itself to the gateway for testing\n\n    ![](images/step5_1.png)\n\n2.  Click on the Test tab and select\n\n`GET https://gw.techiotraining-420eb34f056ae68f3969289d61f61851-0000.us-east.containers.appdomain.cloud/labtest/sandbox/api/Items`\n\nFrom the drop down. *Your URL will be different from that in the example.*\n \n\n    ![](images/step5_2.png)\n\n\n3.  Click `Send`.\n\n4.  In the first time of running the API after publishing the API, the security warning dialog box may show.  Please click on the `here` link and accept the certificate to see the 401 message.\n    ![](images/step5_4.png)\n\n5.  Go back to the test view and\n    click `Send` again.\n\n6. Now you will see a Response section with Status code 200 OK and the\n    Body displaying all the inventory items.\n\n    ![](images/step5_6.png)\n\n## Publish API\n\nIn this lab, we will make the API available to developers. In order to\ndo so, the API must be first put into a product and then published to\nthe sandbox catalog. A product dictates rate limits and API throttling.\nWhen the product is published, the Invoke policy defined in the previous\nlab is written to the gateway. \n\n### Create Inventory Product and Add API\n\n1.  From the vertical navigation menu on the left, click `Develop` to return to the `Develop` home screen.\n\n    ![](images/step6_1.png)\n\n2.  Click `Add` and select `Product`\n\n3.  On the next screen, select `New Product`. Then click `Next`.\n\n4.  For the Title, enter `Inventory APIs`. Click `Next`.\n\n5.  Select the `inventory 1.0.0 API` as shown in the image below. Then click `Next`.  \n\n    ![](images/tutorial_html_536925e23d552bb5.png)\n\n6.  Keep the `Default Plan` as is. Click `Next`.  \n\n\n7.  Under `Publish`, enable `Publish Product` as shown in the image below. Then click `Next`\n\n8.  The Product is now published successfully with the API base URL listed and available for developers from the developer portal.\n\n\n## Summary\n\nYou completed the APIC Dev Jam Lab 1 - Create and Secure an API. Throughout the tutorial, you explored the key takeaways:\n\n-   Create an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configure ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Test a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\nContinue the APIC Dev Jam! Go to [APIC Dev Jam Lab 2 - The Developer Portal Experience](/APICDevJam/Lab2) to learn how to socialise this API and make it available to developers.\n","type":"Mdx","contentDigest":"0aa8870ecd54a8596b75eae72d5d4a30","owner":"gatsby-plugin-mdx","counter":413},"frontmatter":{"title":"APIC Dev Jam Lab 1 - Create and Secure an API"},"exports":{},"rawBody":"---\ntitle: APIC Dev Jam Lab 1 - Create and Secure an API\n---\n\n\nIn this lab, you will get a chance to use the online APIC Developer\nToolkit and its intuitive interface to create a new API using the\nOpenAPI definition (YAML) of the existing product inventory RESTful\nweb-service.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Creating an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configuring ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Testing a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n**NOTE: This demo environment contains a full API Connect installation in Cloud Pak for Integration. The login information to the APIC cluster will be sent in a separate email when you reserve the instance. Use Google Chrome, Firefox or Microsoft Edge to access the cluster using the credentials supplied. Make sure you login using API Manager User Registry not Common Services registry.**\n\n## Import API to the Developer Workspace\n\nFirst, we will download the OpenApi file for the existing REST service\nfor Inventory. Then, we will import it to the online workspace.\n\n1.  Open a browser window to the API Manager Portal. If the screen\n    displays `Your connection is not private` click Advanced, and then Accept the to continue. Log in with the username ad credentials supplied.\n\n    ![](images/tutorial_html_c7010880ec6f2b94.png)\n\n    ![](images/tutorial_html_228c6cdfd6f4d489.png)\n\n    When you login for the first time you will see What's new in API Connect\n    10. Click **Done** after reviewing.\n\n    ![](images/tutorial_html_db2469619b74ee90.png)\n\n2.  Click on the `Develop APIs and\n    Products` tile\n    to enter the online development workspace.\n\n    ![](images/tutorial_html_61b4022571d0a4a3.png)  \n\n3.  Now you are in the home screen of the online developer tool. From\n    here, you can begin to create APIs and Products.\n\n    ![](images/tutorial_html_333c6b76e2638b45.png)  \n\n4.  Click `ADD->API.`\n\n    ![](images/tutorial_html_993047b3f798317c.png)  \n\n5.  On the next screen, select `Existing OpenAPI` under\n    Import**,** as in the image below. Then\n    click   `Next.`\n\n    ![](images/tutorial_html_b219e12b9ba30a1c.png)  \n\n6.  Now download the `Inventory.yaml`\n    file the dte-labs git repository using the following command.\n\n    ```\n    curl -OL https://raw.githubusercontent.com/ibm-cloudintegration/dte-labs/master/APICv10/inventory.yaml\n\n    ```\n\n    You can also down the file using this link : [inventory.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/inventory.yaml)\n\n    Choose the downloaded `Inventory.yaml` OpenAPI definition and Click `Next.`\n\n    ![](images/tutorial_html_64514a49c35e90d4.png)  \n\n7.  **Do not** select **Activate API**.\n    Click `Next`.\n\n    ![](images/tutorial_html_3e51d8ec0929f2b5.png)  \n\n8.  The API should be imported successfully as shown in the image below.\n    Click `Edit API`.\n\n    ![](images/tutorial_html_83ece115b799d430.png)\n\n## Configure API\n\nAfter importing the existing API, the first step is to configure basic\nsecurity before exposing it to other developers. By creating a client\nkey and secret security, you are able to identify the app using the\nservices. Next, we will define the backend endpoints where the API is\nactually running. API Connect supports pointing to multiple backend\nendpoints to match your multiple build stage environments. Finally, we\nwill configure the proxy call to invoke the endpoint.\n\n### Configure API Key security\n\n\n1. \tClick on the + icon besides the security schema to create a new security schema\n    ![](images/tutorial_html_99e51d8ec0929f2b5.png)\n\n2.\tPut in the name of the schema and select apiKey as the type\n    ![](images/tutorial_html_3e41d8ec0929f2b5.png)\n3.  Put in the name of the key and select “client_id” as the key type and header as the location.  Then click\nCreate\n    ![](images/tutorial_html_5b900a842ec2bfff.png)\n\n4.  The newly created security schema will be shown in the left navigator.\n\n5.  Click on the + icon besides the security\n\n    ![](images/tutorial_html_3e4ZZ8ec0929f2b5.png)\n\n6.\tSelect the security schema created in the step 3, and then click create and then submit to create it.\n\n    ![](images/tutorial_html_5b90ZZa842ec2bfff.png)\n    ![](images/tutorial_html_5b90ZZa842Vc2bfff.png)\n\n7.  Repeat steps 1 to 4 to create X-IBM-Client-secret as a Type Client-Secret,\n\n    ![](images/step2_6.png)\n\n6.\tGo to the Security entry created in step 5. Select the security schema created in the step 3, and then click create and then submit to create it.\n\n    ![](images/tutorial_html_5b90ZZEa842ec2bfff.png)\n\n\n### Define Target-URL for Sandbox environment\n\n1.  Click on the gateway tab and then use the + icon beside property to create a new property.\n    ![](images/step3_1.png)\n\n2.  Update the URL to  https://apic-pot-inventory-api.mybluemix.net\n    ![](images/step3_2.png)\n\n3.  Click `Save` to complete the\n    configuration.\n\n### Configure Proxy Call in Designer\n\n1.  Click on the “policies” and then click on the “Invoke” item in the assembly panel.\n    ![](images/step4_1.png)\n\n2.  Update the URL in the invoke configuration with  `$(target-url)$(request.path)$(request.search)`\n    ![](images/step4_2.png)\n\n3.  Click `Save`.\n\n## Test the API\n\nIn the API designer, you have the ability to test the API immediately\nafter creation in the Assemble view!\n\n1.  Toggle `Offline` to activate API. to publish the API itself to the gateway for testing\n\n    ![](images/step5_1.png)\n\n2.  Click on the Test tab and select\n\n`GET https://gw.techiotraining-420eb34f056ae68f3969289d61f61851-0000.us-east.containers.appdomain.cloud/labtest/sandbox/api/Items`\n\nFrom the drop down. *Your URL will be different from that in the example.*\n \n\n    ![](images/step5_2.png)\n\n\n3.  Click `Send`.\n\n4.  In the first time of running the API after publishing the API, the security warning dialog box may show.  Please click on the `here` link and accept the certificate to see the 401 message.\n    ![](images/step5_4.png)\n\n5.  Go back to the test view and\n    click `Send` again.\n\n6. Now you will see a Response section with Status code 200 OK and the\n    Body displaying all the inventory items.\n\n    ![](images/step5_6.png)\n\n## Publish API\n\nIn this lab, we will make the API available to developers. In order to\ndo so, the API must be first put into a product and then published to\nthe sandbox catalog. A product dictates rate limits and API throttling.\nWhen the product is published, the Invoke policy defined in the previous\nlab is written to the gateway. \n\n### Create Inventory Product and Add API\n\n1.  From the vertical navigation menu on the left, click `Develop` to return to the `Develop` home screen.\n\n    ![](images/step6_1.png)\n\n2.  Click `Add` and select `Product`\n\n3.  On the next screen, select `New Product`. Then click `Next`.\n\n4.  For the Title, enter `Inventory APIs`. Click `Next`.\n\n5.  Select the `inventory 1.0.0 API` as shown in the image below. Then click `Next`.  \n\n    ![](images/tutorial_html_536925e23d552bb5.png)\n\n6.  Keep the `Default Plan` as is. Click `Next`.  \n\n\n7.  Under `Publish`, enable `Publish Product` as shown in the image below. Then click `Next`\n\n8.  The Product is now published successfully with the API base URL listed and available for developers from the developer portal.\n\n\n## Summary\n\nYou completed the APIC Dev Jam Lab 1 - Create and Secure an API. Throughout the tutorial, you explored the key takeaways:\n\n-   Create an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configure ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Test a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\nContinue the APIC Dev Jam! Go to [APIC Dev Jam Lab 2 - The Developer Portal Experience](/APICDevJam/Lab2) to learn how to socialise this API and make it available to developers.\n","fileAbsolutePath":"/Users/dtemkin/Downloads/integration-tech-io-master/src/pages/APICDevJam/Lab1/index.md"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}